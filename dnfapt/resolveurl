package dnfapt

import (
	"fmt"

	"github.com/abtransitionit/gocore/logx"
)

// Name:resolveURL
//
// Description: resolves the final download URL for a CLI.
//
// Todos:
// - handle "latest" version resolution here.
func ResolveUrlRepo(logger logx.Logger, cli GoCli, osType string, osArch string, uname string) (string, error) {

	// lookup the templated URL in package private database
	template, ok := goCliReference[cli.Name]
	if !ok {
		return "", fmt.Errorf("no cli %s found in Go CLI db", cli.Name)
	}
	if template.Url == "" {
		return "", fmt.Errorf("no URL template defined for %s", cli.Name)
	}
	// For now, just use Version directly
	tag := cli.Version
	return substituteUrlPlaceholders(template.Url, cli, tag, osType, osArch, uname), nil
}

func ResolveUrlGpg(logger logx.Logger, cli GoCli, osType string, osArch string, uname string) (string, error) {

	// lookup the templated URL in package private database
	template, ok := goCliReference[cli.Name]
	if !ok {
		return "", fmt.Errorf("no cli %s found in Go CLI db", cli.Name)
	}
	if template.Url == "" {
		return "", fmt.Errorf("no URL template defined for %s", cli.Name)
	}
	// For now, just use Version directly
	tag := cli.Version
	return substituteUrlPlaceholders(template.Url, cli, tag, osType, osArch, uname), nil
}
